[
    {
        "id": 1,
        "title": "프론트엔드 입문 계기가 어떻게 되세요?",
        "content": " 5급공무원 준비와 공기업 NCS 준비를 기점으로 1평 남짓한 좁은 공간에서 종이로 된 책을 공부하는 것이 정말 힘들게 느껴졌습니다. 초등학교 입학부터 공부라고 하는 것은 종이로 된 책을 읽는 것으로만 알고 있었지만 18년간의 상식이 무색하게도 종이로 된 책으로 하는 공부는 당분간 원치 않았습니다. 그렇기 때문에 노트북 하나만으로 모든 것이 가능한 코딩이라는 공부는 굉장히 큰 호감으로 다가왔습니다. \n\n 따라서 영역을 바꿔 논리적인 사고를 길러주면서도 기초적인 단계에서는 종이 책을 보지 않아도 크게 무리가 없는 코딩을 유튜브를 통해 시작하게 되었습니다. 코딩 입문자가 첫 기술로 가장 고민한다는 C언어와 HTML 중 다소 이론스러워 보이는 부분이 많은 C언어보다는 작은 form이라고 해도 무언가 만들면서 배우는 HTML이 더 호감으로 느껴져서 프론트엔드에 발을 들이게 되었습니다."
    },
    {
        "id": 2,
        "title": "비전공자가 어떻게 진로를 개발 쪽으로 정하게 되셨어요?",
        "content": " 종이로 된 책을 그만 보고 싶고, 그렇다고 아무 공부도 안하고 있자니 나태해질 것 같고, 공부를 해도 이제는 단순 암기가 아닌 머리를 쓰는 공부를 하고 싶었습니다. 3가지 수요를 모두 충족하는 코딩은 처음에는 취미로 시작했으나 몇 달 째 하루 반나절동안 노트북 앞에 앉아 있게 만드는 매력이 있었습니다. 코로나로 인해 일정이 넉넉해서 투자할 시간이 코딩뿐이긴 했지만 그래도 알게 모르게 애정이 서서히 생겼던 것 같습니다. \n\n 리액트를 공부하다 문득 생각이 들었습니다. 내가 리액트까지 발을 들이는 것이면 진지하게 진로로 생각해보고 들어가야 하는 것이 아닌가? 조건, 반복문 같은 논리적 이해를 요구하는 것은 취미로 한다 쳐도 내가 리액트를 시작하면 정말 지금껏 해왔던 사무직렬 공부는 영영 보내야 되는 것이었습니다. 그렇지만 제 고민은 그렇게 길지 않았습니다. 똑같은 일과와 일정한 급여를 받는 사무직 공무원(물론 그분들을 비난하는 것이 아니라 개인적인 가치관의 차이라고 생각합니다)의 하루와 개발자의 삶을 비교해보니 답은 금방 정할 수 있었습니다. 특정 순간순간마다 발전을 요하고 자신의 능력에 따라 급여가 좌우되는 개발자가 조금 더 스스로를 채찍질하며 열심히 살 것 같고 재미있는 삶일 것이라고 예상했습니다. 아니 확실할 것이라고 생각하였고 그렇게 리액트에 발을 들이게 되었습니다."
    },
    {
        "id": 3,
        "title": "비전공자이신데 개발이 어렵거나 질리지는 않으세요?",
        "content": " 어려울 때는 있지만 전혀 질리지는 않습니다. HTML, CSS, 자바스크립트를 배우고 React를 경험한 때를 기점으로 완전한 결과물을 구현하기 위해 자바스크립트로도 백엔드를 구현할 수 있는 Express 서버를 구축하는 등 백엔드 영역까지 호기심을 갖게 되었습니다. 몇 달 동안 스스로 무언가를 구현하기 위해 능동적으로 찾아보는 공부를 하고 있었습니다. 더 이상 코드를 치는 코딩이 아닌 프로그램을 만드는 프로그래밍을 하고 있다는 진취감을 느낄 수 있었고 기초적인 부분보다 조금 더 깊숙한 부분을 파고 드는 것을 스스로 원하여 하게 되었습니다. \n\n 종이 책으로 공부하던 때와 프로그래밍을 공부하던 때의 가장 큰 차이점은 이 부분이라고 생각합니다. 심화적인 부분을 누군가에게 강제당해서 하느냐, 아니면 스스로가 원해서 하느냐, 적어도 저에게는 프로그래밍이 아직까지 흥미롭고 더 알고 싶은 이유는 이 점에 있다고 생각합니다. 예를 들어 ES6의 ternary operator나 destructuring 등 자바스크립트 신 기능을 책으로만 봤다면 지금까지 기억하고 쓸 수 있었을까 싶습니다. 물론 암기하여 외울 수는 있겠지만 단순 암기와 활용 경험은 정말 천지 차이라고 생각합니다. 실제로 무언가를 만들어보면서 개발 시 스스로의 편의 또는 필요에 의해 사용했기 때문에 기억에 오래 남아 지금도 잘 쓰고 있는 것이라고 생각합니다."
    },
    {
        "id": 4,
        "title": "향후 계획이 어떻게 되시나요?",
        "content": " 지금은 프론트엔드에 더 큰 흥미를 갖고 있고 향후 몇 년 간은 프론트엔드에 많은 무게를 둘 것이지만 공무원을 준비하던 때처럼 스스로를 한 분야에 가두는 생각은 하고 싶지 않습니다. 프론트엔드 시니어 급으로 능숙해지면 백엔드 또한 깊은 연구의 대상이 될 것입니다. 그리고 프론트엔드를 잘하려면 당연히 백엔드의 지식도 필요하다고 생각합니다. \n\n 실제로 지금 운영중인 사이트인 소파의 서버는 Apollo로 기본적으로는 GraphQL로 클라이언트와 통신하고 있고 네이버 소셜로그인 구현부는 Apollo에 Express서버를 결합하여 Rest API로 HTTP 통신을 하고 있는데 이 때 code를 POST로 fetch해서 백엔드에서 code를 받아 액세스 토큰을 요청하고 네이버 유저 정보를 요청하여 받은 정보를 토대로 DB에서 유저를 찾거나 만들고 토큰을 생성 후 이를 프론트엔드로 응답하여 브라우저 저장소에 넣어뒀다가 인가가 필요할 때마다 꺼내서 활용하는 이 로직을 백엔드 지식을 기반으로 프론트-백의 흐름을 이해하기 굉장히 편했습니다. 이러한 경험은 백엔드 공부도 소홀히 하면 안됨을 느끼게 해주었기에 프론트엔드 팀 개발자로서 성과는 물론 백엔드측 지식을 프론트엔드에 잘 녹여내고 싶습니다."
    },
    {
        "id": 5,
        "title": "스스로 프론트엔드를 잘한다고 생각하시나요?",
        "content": " HTML, CSS, 자바스크립트, 리액트, Next, Recoil, Apollo, 타입스크립트 등 제가 가진 프론트엔드 스킬을 수치화한다면 최하~최상 중 중에 가까운 하라고 표현하고 싶습니다. 심화적인 부분까지 모든 것을 안다고 할 수는 없지만 리액트의 컴포넌트, state, prop 개발의 컨셉을 이해하고 상태관리를 통해 데이터를 보관하고 조작할 수 있으며 타입스크립트를 통해 컴포넌트가 가지는 prop의 타입과 state의 타입을 제어하고 Next를 SSR과 CSR의 차이를 알고 활용할 수 있다는 점은 소파 사이트를 통해 증명되었다고 생각합니다. 단, 이슈가 생기면 작은 부분을 캐고 캐서 어떻게든 해결하긴 하나 그 과정에 걸리는 시간이 아직은 조금 길다고 생각되기에 후한 점수를 주기에는 개인적으로 아쉽습니다."
    },
    {
        "id": 6,
        "title": "지금 가장 많이 사용하는 기술이 뭐고 어떻게 배우게 되셨나요?",
        "content": " 1) 이전의 문제점\n 소파 사이트 제작에 사용된 Next와 테일윈드CSS를 배우게 된 계기와 학습 방법에 대해 말씀드리자면 사실 소파 이전에 작게나마 만들어본 미배포 사이트가 있었습니다. 중고품을 거래하는 플랫폼인 오이마켓이라는 사이트였는데 두 가지의 큰 문제점을 느꼈습니다. React만으로 구성되었던 지라 모든 데이터를 CSR로 처리했기에 첫 index 화면에서 데이터를 가져오기까지의 로딩 시간이 2~4초정도로 체감상 굉장히 길어서 유저 사용성이 좋지 않았고 중고거래 특성상 웹보다는 스마트폰으로 접속을 자주하기에 앱까지는 아니더라도 적어도 반응형 웹을 구현했어야 됐지만 제가 사용 중이었던 styled-components로는 구현이 굉장히 복잡하고 까다로웠습니다. \n\n2) 개선 방향 \n 따라서 리액트의 기술을 유지하면서도 느린 첫 로딩이라는 단점을 타파할 수 있는 Next와 일관된 디자인으로 반응형 웹을 쉽게 구현할 수 있고 부트스트랩에 이어 폭발적인 성장세를 보이는 CSS프레임워크인 테일윈드 CSS를 선택하게 되었습니다. 단순히 누군가가 좋다더라, 요새는 이걸 배워야 한다더라 등 타인에 의해 공부를 시작한 것이 아니라 제가 필요에 의해 배우게 된 기술들이었기에 마인드도 소홀해지지 않고 긍정적으로 작용했던 것 같습니다."
    },
    {
        "id": 7,
        "title": "보통 기술을 배울 때 어떻게 공부하시나요?",
        "content": " 1) 학습 방법\n NextJS를 배울 때의 경험을 예로 들어보겠습니다. Next를 배우기 위해서는 우선 SSR에 대해 이해할 필요가 있었습니다. 느린 첫 로딩을 개선해줄 기술이 SSR이었기 때문에 국내 유명 프로그래밍 유튜버들의 SSR 영상은 거의 다 돌려보았고 Next 공식문서나 구글링 등 공통적인 부분을 찾아 노션에 기록하였습니다. SSR을 이해하기 위해서는 CSR과의 차이, AJAX 기술을 통해 SPA 트렌드가 시작된 과정을 이해할 필요가 있었습니다. 그렇게 많은 영상과 많은 글을 보았지만 정작 제가 SSR과 관련해서 실질적인 지식을 얻게 된 과정은 이런 시각적인 자료보다 실제로 소파 사이트를 만들며 온몸으로 부딪혔을 때였습니다. \n\n 예를 들어 오이마켓은 인가가 필요할 때 토큰을 localStorage에 저장하여 꺼내쓰는 방식으로 구현했는데 소파는 서버 측에서 localStorage에 저장한 토큰을 꺼내쓰고 싶어도 접근할 수 없으니 굉장히 당황스러웠습니다. 지금 생각해보면 서버 측에서 당연히 브라우저 저장소인 localStorage에 접근할 수 없는 것인데 그 당시에는 아무리 많은 영상과 많은 글을 보고 이론을 줄줄 외워도 정작 부딪혀보니 바보가 된 기분이었습니다. 다행히 세션을 배웠을 때 세션ID가 쿠키에 저장되어 매 요청마다 서버와 통신한다는 점을 기억해내서 토큰을 localStorage가 아닌 쿠키에 저장하는 것으로 돌리니 서버 측에서 쿠키에 접근하여 토큰을 꺼내 쓸 수 있게 되어 문제를 해결한 기억이 있습니다. \n\n 2) 느낀 점 \n 이 때 '이론과 실전은 다르다'라는 말을 정말 크게 체감했습니다. 그리고 한 번 부딪히고 다시 노션의 필기를 보니 이해가 더 잘 되는 느낌이었습니다. 따라서 기술 습득을 위한 제 학습 방법은 '온 몸으로 부딪혀보기'가 핵심이라고 말씀드리고 싶습니다."
    }
]